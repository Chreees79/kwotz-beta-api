require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/user_profiles", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # UserProfile. As you add validations to UserProfile, be sure to
  # adjust the attributes here as well.
  before(:each) do
   @user = User.create(email: "test@test.com", password: "password")
  
    let(:valid_attributes) {
      {
        user_id: @user.id, 
        company: "tests", 
        address: "testing", 
        zipcode: "3test", 
        city: "testland", 
        function: "tester", 
        first_name: "test", 
        last_name: "test", 
        complete: true, 
        shipping_alias: "test alias", 
        shipping_address: "test address", 
        shipping_zipcode: "testzip", 
        shipping_city: "city test", 
        phone_number: "0612345678"
      }
    }

    let(:invalid_attributes) {
      { 
        address: "testing", 
        zipcode: "3test", 
        city: "testland", 
        function: "tester", 
        first_name: "test", 
        last_name: "test", 
        complete: true, 
        shipping_alias: "test alias", 
        shipping_address: "test address", 
        shipping_zipcode: "testzip", 
        shipping_city: "city test", 
        phone_number: "0612345678"
      }
    }

    # This should return the minimal set of values that should be in the headers
    # in order to pass any filters (e.g. authentication) defined in
    # UserProfilesController, or in your router and rack
    # middleware. Be sure to keep this updated too.
    let(:valid_headers) {
      {}
    }

    describe "GET /index" do
      it "renders a successful response" do
        UserProfile.create! valid_attributes
        get user_profiles_url, headers: valid_headers, as: :json
        expect(response).to be_successful
      end
    end

    describe "GET /show" do
      it "renders a successful response" do
        user_profile = UserProfile.create! valid_attributes
        get user_profile_url(user_profile), as: :json
        expect(response).to be_successful
      end
    end

    describe "POST /create" do
      context "with valid parameters" do
        it "creates a new UserProfile" do
          expect {
            post user_profiles_url,
                params: { user_profile: valid_attributes }, headers: valid_headers, as: :json
          }.to change(UserProfile, :count).by(1)
        end

        it "renders a JSON response with the new user_profile" do
          post user_profiles_url,
              params: { user_profile: valid_attributes }, headers: valid_headers, as: :json
          expect(response).to have_http_status(:created)
          expect(response.content_type).to match(a_string_including("application/json"))
        end
      end

      context "with invalid parameters" do
        it "does not create a new UserProfile" do
          expect {
            post user_profiles_url,
                params: { user_profile: invalid_attributes }, as: :json
          }.to change(UserProfile, :count).by(0)
        end

        it "renders a JSON response with errors for the new user_profile" do
          post user_profiles_url,
              params: { user_profile: invalid_attributes }, headers: valid_headers, as: :json
          expect(response).to have_http_status(:unprocessable_entity)
          expect(response.content_type).to match(a_string_including("application/json"))
        end
      end
    end

    describe "PATCH /update" do
      context "with valid parameters" do
        let(:new_attributes) {
          skip("Add a hash of attributes valid for your model")
        }

        it "updates the requested user_profile" do
          user_profile = UserProfile.create! valid_attributes
          patch user_profile_url(user_profile),
                params: { user_profile: new_attributes }, headers: valid_headers, as: :json
          user_profile.reload
          skip("Add assertions for updated state")
        end

        it "renders a JSON response with the user_profile" do
          user_profile = UserProfile.create! valid_attributes
          patch user_profile_url(user_profile),
                params: { user_profile: new_attributes }, headers: valid_headers, as: :json
          expect(response).to have_http_status(:ok)
          expect(response.content_type).to match(a_string_including("application/json"))
        end
      end

      context "with invalid parameters" do
        it "renders a JSON response with errors for the user_profile" do
          user_profile = UserProfile.create! valid_attributes
          patch user_profile_url(user_profile),
                params: { user_profile: invalid_attributes }, headers: valid_headers, as: :json
          expect(response).to have_http_status(:unprocessable_entity)
          expect(response.content_type).to match(a_string_including("application/json"))
        end
      end
    end

    describe "DELETE /destroy" do
      it "destroys the requested user_profile" do
        user_profile = UserProfile.create! valid_attributes
        expect {
          delete user_profile_url(user_profile), headers: valid_headers, as: :json
        }.to change(UserProfile, :count).by(-1)
      end
    end
  end
end
